{"ast":null,"code":"var _jsxFileName = \"E:\\\\dbms project bank\\\\frontend\\\\src\\\\pages\\\\TransactionsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTransactions, createTransaction,\n// Used for logging withdrawals ONLY\ndepositAmount,\n// Used for actual deposits (updates balance, NO LOG)\ngetBalanc // Used to fetch the current balance\n} from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsPage = () => {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n\n  // Loading states\n  const [loadingBalance, setLoadingBalance] = useState(true);\n  const [loadingTransactions, setLoadingTransactions] = useState(true);\n\n  // Error states\n  const [errorBalance, setErrorBalance] = useState(null);\n  const [errorTransactions, setErrorTransactions] = useState(null);\n\n  // Form states\n  const [depositAmountValue, setDepositAmountValue] = useState('');\n  const [withdrawAmountValue, setWithdrawAmountValue] = useState('');\n  const [formDepositError, setFormDepositError] = useState('');\n  const [formDepositSuccess, setFormDepositSuccess] = useState('');\n  const [formWithdrawalError, setFormWithdrawalError] = useState('');\n  const [formWithdrawalSuccess, setFormWithdrawalSuccess] = useState('');\n\n  // --- Fetch Balance Function ---\n  const fetchBalance = async () => {\n    setLoadingBalance(true);\n    setErrorBalance(null);\n    try {\n      const res = await getBalance();\n      const rawBalance = res.data.balance; // Get the raw value\n\n      // *** FIX HERE: Convert to number and validate ***\n      const numericBalance = parseFloat(rawBalance); // Attempt conversion\n\n      if (isNaN(numericBalance)) {\n        // Handle cases where the API might return something non-numeric unexpectedly\n        console.error(\"Received non-numeric balance from API:\", rawBalance);\n        throw new Error('Invalid balance data received from server.');\n      }\n      setBalance(numericBalance); // Set state ONLY with a valid number\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Fetch balance error:\", err);\n      // Use err.message if we threw a custom error above\n      setErrorBalance(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Failed to fetch balance');\n      setBalance(null); // Reset balance on error\n    } finally {\n      setLoadingBalance(false);\n    }\n  };\n\n  // --- Fetch Transactions Function ---\n  const fetchTransactions = async () => {\n    setLoadingTransactions(true);\n    setErrorTransactions(null);\n    try {\n      const res = await getTransactions();\n      // Adjust based on your actual API response structure\n      setTransactions(res.data.transactions || res.data || []);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Fetch transactions error:\", err);\n      setErrorTransactions(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to fetch transactions');\n      setTransactions([]);\n    } finally {\n      setLoadingTransactions(false);\n    }\n  };\n\n  // --- Fetch initial data on mount ---\n  useEffect(() => {\n    fetchBalance();\n    fetchTransactions();\n  }, []);\n\n  // --- Handle Deposit Submission (Uses /deposit ONLY) ---\n  const handleDepositSubmit = async e => {\n    e.preventDefault();\n    setFormDepositError('');\n    setFormDepositSuccess('');\n    const amount = parseFloat(depositAmountValue);\n    if (isNaN(amount) || amount <= 0) {\n      setFormDepositError('Please enter a valid positive amount.');\n      return;\n    }\n    try {\n      // Call /deposit: This updates the balance but DOES NOT log a transaction.\n      await depositAmount({\n        amount\n      });\n      setFormDepositSuccess(`Successfully deposited $${amount.toFixed(2)}. Balance updated.`);\n      setFormDepositError('Note: This deposit is NOT logged in the transaction history below due to backend limitations.'); // Clarify limitation\n      setDepositAmountValue(''); // Clear input\n      fetchBalance(); // Refresh balance display\n      // DO NOT fetchTransactions() - the /deposit endpoint didn't create one.\n    } catch (depositError) {\n      var _depositError$respons, _depositError$respons2;\n      console.error(\"Deposit error:\", depositError);\n      setFormDepositError(((_depositError$respons = depositError.response) === null || _depositError$respons === void 0 ? void 0 : (_depositError$respons2 = _depositError$respons.data) === null || _depositError$respons2 === void 0 ? void 0 : _depositError$respons2.message) || 'Deposit failed.');\n    }\n  };\n\n  // --- Handle Withdrawal Submission (Uses /transaction ONLY - LOGGING ONLY) ---\n  const handleWithdrawSubmit = async e => {\n    e.preventDefault();\n    setFormWithdrawalError('');\n    setFormWithdrawalSuccess('');\n    const amount = parseFloat(withdrawAmountValue);\n    if (isNaN(amount) || amount <= 0) {\n      setFormWithdrawalError('Please enter a valid positive amount.');\n      return;\n    }\n\n    // Frontend Balance Check (Essential)\n    if (balance === null) {\n      setFormWithdrawalError('Balance information not available.');\n      return;\n    }\n    if (amount > balance) {\n      setFormWithdrawalError('Withdrawal amount exceeds available balance.');\n      return;\n    }\n    try {\n      // Call /transaction: This logs the withdrawal but DOES NOT update the balance.\n      await createTransaction({\n        transaction_type: 'Withdrawal',\n        amount: amount\n      });\n      setFormWithdrawalSuccess(`Withdrawal attempt for $${amount.toFixed(2)} logged successfully in history.`);\n      setFormWithdrawalError('IMPORTANT: Your account balance has NOT been changed. This only logs the attempt.'); // Make limitation extremely clear\n      setWithdrawAmountValue(''); // Clear input\n      fetchTransactions(); // Refresh transaction list to show the logged withdrawal\n      // DO NOT fetchBalance() - it wasn't changed by the backend.\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(\"Withdrawal logging error:\", err);\n      setFormWithdrawalError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to log withdrawal attempt.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Current Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), loadingBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading balance...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 26\n    }, this), errorBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", errorBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 24\n    }, this), balance !== null && !loadingBalance && !errorBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '1.5em',\n        fontWeight: 'bold'\n      },\n      children: [\"$\", balance.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Make a Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontStyle: 'italic',\n        color: 'orange'\n      },\n      children: \"Note: Deposits update your balance but are **not** recorded in the history below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDepositSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"depositAmount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"depositAmount\",\n          value: depositAmountValue,\n          onChange: e => setDepositAmountValue(e.target.value),\n          min: \"0.01\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), formDepositSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: formDepositSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 34\n      }, this), formDepositError && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: formDepositSuccess ? 'orange' : 'red'\n        },\n        children: formDepositError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Log a Withdrawal Attempt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontStyle: 'italic',\n        color: 'red',\n        fontWeight: 'bold'\n      },\n      children: \"WARNING: This action only logs the withdrawal attempt in the history. Your actual account balance WILL NOT decrease.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleWithdrawSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"withdrawAmount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"withdrawAmount\",\n          value: withdrawAmountValue,\n          onChange: e => setWithdrawAmountValue(e.target.value),\n          min: \"0.01\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this), formWithdrawalSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: formWithdrawalSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 39\n      }, this), formWithdrawalError && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: formWithdrawalSuccess ? 'orange' : 'red'\n        },\n        children: formWithdrawalError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: balance === null || withdrawAmountValue > balance,\n        children: \"Log Withdrawal Attempt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), loadingTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transaction history...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 31\n    }, this), errorTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error fetching history: \", errorTransactions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 29\n    }, this), !loadingTransactions && transactions.length === 0 && !errorTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions found (or deposits may not be logged).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 12\n    }, this) // Clarify why it might be empty\n    , transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(tx => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(tx.transaction_date || tx.created_at || tx.timestamp).toLocaleString(), \" - \", tx.transaction_type, \" - Amount: $\", parseFloat(tx.amount).toFixed(2), tx.transaction_type === 'Withdrawal' && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red',\n            marginLeft: '10px',\n            fontWeight: 'bold'\n          },\n          children: \"(Logged Only - Balance Unchanged)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 58\n        }, this)]\n      }, tx.id || tx.transaction_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 14\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsPage, \"ErlQ89WrNAgx4riF/qm0E/xufp8=\");\n_c = TransactionsPage;\nexport default TransactionsPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionsPage\");","map":{"version":3,"names":["React","useState","useEffect","getTransactions","createTransaction","depositAmount","getBalanc","jsxDEV","_jsxDEV","TransactionsPage","_s","balance","setBalance","transactions","setTransactions","loadingBalance","setLoadingBalance","loadingTransactions","setLoadingTransactions","errorBalance","setErrorBalance","errorTransactions","setErrorTransactions","depositAmountValue","setDepositAmountValue","withdrawAmountValue","setWithdrawAmountValue","formDepositError","setFormDepositError","formDepositSuccess","setFormDepositSuccess","formWithdrawalError","setFormWithdrawalError","formWithdrawalSuccess","setFormWithdrawalSuccess","fetchBalance","res","getBalance","rawBalance","data","numericBalance","parseFloat","isNaN","console","error","Error","err","_err$response","_err$response$data","response","message","fetchTransactions","_err$response2","_err$response2$data","handleDepositSubmit","e","preventDefault","amount","toFixed","depositError","_depositError$respons","_depositError$respons2","handleWithdrawSubmit","transaction_type","_err$response3","_err$response3$data","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","fontWeight","fontStyle","onSubmit","htmlFor","type","id","value","onChange","target","min","step","required","disabled","length","map","tx","Date","transaction_date","created_at","timestamp","toLocaleString","marginLeft","transaction_id","_c","$RefreshReg$"],"sources":["E:/dbms project bank/frontend/src/pages/TransactionsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  getTransactions,\r\n  createTransaction, // Used for logging withdrawals ONLY\r\n  depositAmount,    // Used for actual deposits (updates balance, NO LOG)\r\n  getBalanc      // Used to fetch the current balance\r\n} from '../api';\r\n\r\nconst TransactionsPage = () => {\r\n  const [balance, setBalance] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  // Loading states\r\n  const [loadingBalance, setLoadingBalance] = useState(true);\r\n  const [loadingTransactions, setLoadingTransactions] = useState(true);\r\n\r\n  // Error states\r\n  const [errorBalance, setErrorBalance] = useState(null);\r\n  const [errorTransactions, setErrorTransactions] = useState(null);\r\n\r\n  // Form states\r\n  const [depositAmountValue, setDepositAmountValue] = useState('');\r\n  const [withdrawAmountValue, setWithdrawAmountValue] = useState('');\r\n  const [formDepositError, setFormDepositError] = useState('');\r\n  const [formDepositSuccess, setFormDepositSuccess] = useState('');\r\n  const [formWithdrawalError, setFormWithdrawalError] = useState('');\r\n  const [formWithdrawalSuccess, setFormWithdrawalSuccess] = useState('');\r\n\r\n  // --- Fetch Balance Function ---\r\n  const fetchBalance = async () => {\r\n    setLoadingBalance(true);\r\n    setErrorBalance(null);\r\n    try {\r\n      const res = await getBalance();\r\n      const rawBalance = res.data.balance; // Get the raw value\r\n\r\n      // *** FIX HERE: Convert to number and validate ***\r\n      const numericBalance = parseFloat(rawBalance); // Attempt conversion\r\n\r\n      if (isNaN(numericBalance)) {\r\n        // Handle cases where the API might return something non-numeric unexpectedly\r\n        console.error(\"Received non-numeric balance from API:\", rawBalance);\r\n        throw new Error('Invalid balance data received from server.');\r\n      }\r\n\r\n      setBalance(numericBalance); // Set state ONLY with a valid number\r\n\r\n    } catch (err) {\r\n      console.error(\"Fetch balance error:\", err);\r\n      // Use err.message if we threw a custom error above\r\n      setErrorBalance(err.response?.data?.message || err.message || 'Failed to fetch balance');\r\n      setBalance(null); // Reset balance on error\r\n    } finally {\r\n      setLoadingBalance(false);\r\n    }\r\n  };\r\n\r\n  // --- Fetch Transactions Function ---\r\n  const fetchTransactions = async () => {\r\n    setLoadingTransactions(true);\r\n    setErrorTransactions(null);\r\n    try {\r\n      const res = await getTransactions();\r\n      // Adjust based on your actual API response structure\r\n      setTransactions(res.data.transactions || res.data || []);\r\n    } catch (err) {\r\n      console.error(\"Fetch transactions error:\", err);\r\n      setErrorTransactions(err.response?.data?.message || 'Failed to fetch transactions');\r\n      setTransactions([]);\r\n    } finally {\r\n      setLoadingTransactions(false);\r\n    }\r\n  };\r\n\r\n  // --- Fetch initial data on mount ---\r\n  useEffect(() => {\r\n    fetchBalance();\r\n    fetchTransactions();\r\n  }, []);\r\n\r\n  // --- Handle Deposit Submission (Uses /deposit ONLY) ---\r\n  const handleDepositSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormDepositError('');\r\n    setFormDepositSuccess('');\r\n    const amount = parseFloat(depositAmountValue);\r\n\r\n    if (isNaN(amount) || amount <= 0) {\r\n      setFormDepositError('Please enter a valid positive amount.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Call /deposit: This updates the balance but DOES NOT log a transaction.\r\n      await depositAmount({ amount });\r\n\r\n      setFormDepositSuccess(`Successfully deposited $${amount.toFixed(2)}. Balance updated.`);\r\n      setFormDepositError('Note: This deposit is NOT logged in the transaction history below due to backend limitations.'); // Clarify limitation\r\n      setDepositAmountValue(''); // Clear input\r\n      fetchBalance();         // Refresh balance display\r\n      // DO NOT fetchTransactions() - the /deposit endpoint didn't create one.\r\n\r\n    } catch (depositError) {\r\n      console.error(\"Deposit error:\", depositError);\r\n      setFormDepositError(depositError.response?.data?.message || 'Deposit failed.');\r\n    }\r\n  };\r\n\r\n  // --- Handle Withdrawal Submission (Uses /transaction ONLY - LOGGING ONLY) ---\r\n  const handleWithdrawSubmit = async (e) => {\r\n      e.preventDefault();\r\n      setFormWithdrawalError('');\r\n      setFormWithdrawalSuccess('');\r\n      const amount = parseFloat(withdrawAmountValue);\r\n\r\n      if (isNaN(amount) || amount <= 0) {\r\n          setFormWithdrawalError('Please enter a valid positive amount.');\r\n          return;\r\n      }\r\n\r\n      // Frontend Balance Check (Essential)\r\n      if (balance === null) {\r\n          setFormWithdrawalError('Balance information not available.');\r\n          return;\r\n      }\r\n       if (amount > balance) {\r\n          setFormWithdrawalError('Withdrawal amount exceeds available balance.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n          // Call /transaction: This logs the withdrawal but DOES NOT update the balance.\r\n          await createTransaction({ transaction_type: 'Withdrawal', amount: amount });\r\n\r\n          setFormWithdrawalSuccess(`Withdrawal attempt for $${amount.toFixed(2)} logged successfully in history.`);\r\n          setFormWithdrawalError('IMPORTANT: Your account balance has NOT been changed. This only logs the attempt.'); // Make limitation extremely clear\r\n          setWithdrawAmountValue(''); // Clear input\r\n          fetchTransactions();    // Refresh transaction list to show the logged withdrawal\r\n          // DO NOT fetchBalance() - it wasn't changed by the backend.\r\n\r\n      } catch (err) {\r\n          console.error(\"Withdrawal logging error:\", err);\r\n          setFormWithdrawalError(err.response?.data?.message || 'Failed to log withdrawal attempt.');\r\n      }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Transactions</h2>\r\n\r\n      {/* --- Balance Display --- */}\r\n      <h3>Current Balance</h3>\r\n      {loadingBalance && <p>Loading balance...</p>}\r\n      {errorBalance && <p style={{ color: 'red' }}>Error: {errorBalance}</p>}\r\n      {balance !== null && !loadingBalance && !errorBalance && (\r\n        <p style={{ fontSize: '1.5em', fontWeight: 'bold' }}>\r\n          ${balance.toFixed(2)}\r\n        </p>\r\n      )}\r\n      <hr />\r\n\r\n      {/* --- Deposit Form --- */}\r\n      <h3>Make a Deposit</h3>\r\n       <p style={{ fontStyle: 'italic', color: 'orange' }}>\r\n           Note: Deposits update your balance but are **not** recorded in the history below.\r\n       </p>\r\n      <form onSubmit={handleDepositSubmit}>\r\n          <div>\r\n              <label htmlFor=\"depositAmount\">Amount:</label>\r\n              <input\r\n                  type=\"number\"\r\n                  id=\"depositAmount\"\r\n                  value={depositAmountValue}\r\n                  onChange={(e) => setDepositAmountValue(e.target.value)}\r\n                  min=\"0.01\"\r\n                  step=\"0.01\"\r\n                  required\r\n              />\r\n          </div>\r\n          {/* Show both potential messages for clarity */}\r\n          {formDepositSuccess && <p style={{ color: 'green' }}>{formDepositSuccess}</p>}\r\n          {formDepositError && <p style={{ color: formDepositSuccess ? 'orange' : 'red' }}>{formDepositError}</p>}\r\n          <button type=\"submit\">Deposit</button>\r\n      </form>\r\n      <hr />\r\n\r\n      {/* --- Withdrawal Form --- */}\r\n      <h3>Log a Withdrawal Attempt</h3>\r\n       <p style={{ fontStyle: 'italic', color: 'red', fontWeight: 'bold' }}>\r\n           WARNING: This action only logs the withdrawal attempt in the history. Your actual account balance WILL NOT decrease.\r\n       </p>\r\n      <form onSubmit={handleWithdrawSubmit}>\r\n            <div>\r\n                <label htmlFor=\"withdrawAmount\">Amount:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"withdrawAmount\"\r\n                    value={withdrawAmountValue}\r\n                    onChange={(e) => setWithdrawAmountValue(e.target.value)}\r\n                    min=\"0.01\"\r\n                    step=\"0.01\"\r\n                    required\r\n                />\r\n            </div>\r\n             {/* Show both potential messages for clarity */}\r\n            {formWithdrawalSuccess && <p style={{ color: 'green' }}>{formWithdrawalSuccess}</p>}\r\n            {formWithdrawalError && <p style={{ color: formWithdrawalSuccess ? 'orange' : 'red' }}>{formWithdrawalError}</p>}\r\n             {/* Disable if balance is unknown or insufficient */}\r\n            <button type=\"submit\" disabled={balance === null || withdrawAmountValue > balance}>Log Withdrawal Attempt</button>\r\n      </form>\r\n      <hr />\r\n\r\n      {/* --- Transaction History --- */}\r\n      <h3>History</h3>\r\n      {loadingTransactions && <p>Loading transaction history...</p>}\r\n      {errorTransactions && <p style={{ color: 'red' }}>Error fetching history: {errorTransactions}</p>}\r\n      {!loadingTransactions && transactions.length === 0 && !errorTransactions && (\r\n           <p>No transactions found (or deposits may not be logged).</p> // Clarify why it might be empty\r\n      )}\r\n      {transactions.length > 0 && (\r\n        <ul>\r\n          {/* Adjust property names (tx.id, tx.transaction_date, etc.) if needed */}\r\n          {transactions.map((tx) => (\r\n             <li key={tx.id || tx.transaction_id}>\r\n                {new Date(tx.transaction_date || tx.created_at || tx.timestamp).toLocaleString()} - {/* Adjust date field */}\r\n                {tx.transaction_type} -\r\n                Amount: ${parseFloat(tx.amount).toFixed(2)}\r\n                {/* Add visual cue for logged-only withdrawal */}\r\n                {tx.transaction_type === 'Withdrawal' && <span style={{ color: 'red', marginLeft: '10px', fontWeight: 'bold' }}>(Logged Only - Balance Unchanged)</span>}\r\n             </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}