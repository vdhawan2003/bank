{"ast":null,"code":"var _jsxFileName = \"E:\\\\dbms project bank\\\\frontend\\\\src\\\\pages\\\\TransactionsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// Make sure createTransaction is imported from your api file\nimport { getTransactions, createTransaction } from '../api'; // Removed depositAmount import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsPage = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [depositAmountValue, setDepositAmountValue] = useState(''); // For deposit form\n  const [formError, setFormError] = useState('');\n  const [formSuccess, setFormSuccess] = useState('');\n  const fetchTransactions = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await getTransactions();\n      // Assuming backend /transactions returns { transactions: [...] } or similar\n      // Adjust data access based on your actual API response structure\n      setTransactions(res.data.transactions || res.data || []);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Fetch transactions error:\", err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch transactions');\n      setTransactions([]); // Clear transactions on error\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  const handleDepositSubmit = async e => {\n    e.preventDefault();\n    setFormError('');\n    setFormSuccess('');\n    const amount = parseFloat(depositAmountValue);\n    if (isNaN(amount) || amount <= 0) {\n      setFormError('Please enter a valid positive amount.');\n      return;\n    }\n    try {\n      // *** MODIFICATION HERE ***\n      // Using createTransaction to hit the POST /transaction endpoint\n      // IMPORTANT: This backend endpoint ONLY logs the transaction,\n      // it DOES NOT update the account balance.\n      await createTransaction({\n        transaction_type: 'Deposit',\n        amount: amount\n      });\n\n      // Frontend Success message - Note: Balance isn't actually updated by the backend endpoint used.\n      setFormSuccess(`Transaction 'Deposit' for $${amount.toFixed(2)} logged successfully.`);\n      setDepositAmountValue(''); // Clear input\n      fetchTransactions(); // Refresh transaction list to show the newly logged entry\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Transaction logging error:\", err);\n      // Use a more generic error message if needed, as it's not a full deposit anymore\n      setFormError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to log transaction.');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading transaction history...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 23\n  }, this); // Updated loading text slightly\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Log a Deposit Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDepositSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"depositAmount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"depositAmount\",\n          value: depositAmountValue,\n          onChange: e => setDepositAmountValue(e.target.value),\n          min: \"0.01\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), formError && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: formError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }, this), formSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: formSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Log Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error fetching history: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), transactions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(tx => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", new Date(tx.transaction_date || tx.timestamp).toLocaleString(), \" - \", tx.transaction_type, \" - Amount: $\", parseFloat(tx.amount).toFixed(2)]\n      }, tx.id || tx.transaction_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : !error && !loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 31\n    }, this) // Added !loading condition\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsPage, \"FGG8xx9ojvuKirXilSdLlphx4AM=\");\n_c = TransactionsPage;\nexport default TransactionsPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionsPage\");","map":{"version":3,"names":["React","useState","useEffect","getTransactions","createTransaction","jsxDEV","_jsxDEV","TransactionsPage","_s","transactions","setTransactions","loading","setLoading","error","setError","depositAmountValue","setDepositAmountValue","formError","setFormError","formSuccess","setFormSuccess","fetchTransactions","res","data","err","_err$response","_err$response$data","console","response","message","handleDepositSubmit","e","preventDefault","amount","parseFloat","isNaN","transaction_type","toFixed","_err$response2","_err$response2$data","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","min","step","required","style","color","length","map","tx","Date","transaction_date","timestamp","toLocaleString","transaction_id","_c","$RefreshReg$"],"sources":["E:/dbms project bank/frontend/src/pages/TransactionsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// Make sure createTransaction is imported from your api file\r\nimport { getTransactions, createTransaction } from '../api'; // Removed depositAmount import\r\n\r\nconst TransactionsPage = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [depositAmountValue, setDepositAmountValue] = useState(''); // For deposit form\r\n  const [formError, setFormError] = useState('');\r\n  const [formSuccess, setFormSuccess] = useState('');\r\n\r\n  const fetchTransactions = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const res = await getTransactions();\r\n      // Assuming backend /transactions returns { transactions: [...] } or similar\r\n      // Adjust data access based on your actual API response structure\r\n      setTransactions(res.data.transactions || res.data || []);\r\n    } catch (err) {\r\n      console.error(\"Fetch transactions error:\", err);\r\n      setError(err.response?.data?.message || 'Failed to fetch transactions');\r\n      setTransactions([]); // Clear transactions on error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTransactions();\r\n  }, []);\r\n\r\n  const handleDepositSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setFormError('');\r\n    setFormSuccess('');\r\n    const amount = parseFloat(depositAmountValue);\r\n    if (isNaN(amount) || amount <= 0) {\r\n      setFormError('Please enter a valid positive amount.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // *** MODIFICATION HERE ***\r\n      // Using createTransaction to hit the POST /transaction endpoint\r\n      // IMPORTANT: This backend endpoint ONLY logs the transaction,\r\n      // it DOES NOT update the account balance.\r\n      await createTransaction({ transaction_type: 'Deposit', amount: amount });\r\n\r\n      // Frontend Success message - Note: Balance isn't actually updated by the backend endpoint used.\r\n      setFormSuccess(`Transaction 'Deposit' for $${amount.toFixed(2)} logged successfully.`);\r\n      setDepositAmountValue(''); // Clear input\r\n      fetchTransactions(); // Refresh transaction list to show the newly logged entry\r\n\r\n    } catch (err) {\r\n      console.error(\"Transaction logging error:\", err);\r\n      // Use a more generic error message if needed, as it's not a full deposit anymore\r\n      setFormError(err.response?.data?.message || 'Failed to log transaction.');\r\n    }\r\n  };\r\n\r\n\r\n  if (loading) return <p>Loading transaction history...</p>; // Updated loading text slightly\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* Keep the \"Deposit\" heading for UI consistency, but understand the limitation */}\r\n      <h2>Transactions</h2>\r\n\r\n      {/* Form to log a 'Deposit' type transaction */}\r\n      <h3>Log a Deposit Transaction</h3>\r\n      <form onSubmit={handleDepositSubmit}>\r\n        <div>\r\n          <label htmlFor=\"depositAmount\">Amount:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"depositAmount\"\r\n            value={depositAmountValue}\r\n            onChange={(e) => setDepositAmountValue(e.target.value)}\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            required\r\n          />\r\n        </div>\r\n        {formError && <p style={{ color: 'red' }}>{formError}</p>}\r\n        {formSuccess && <p style={{ color: 'green' }}>{formSuccess}</p>}\r\n        {/* Button text can remain 'Deposit' or change to 'Log Deposit' for clarity */}\r\n        <button type=\"submit\">Log Deposit</button>\r\n      </form>\r\n      <hr />\r\n\r\n\r\n      {/* Transaction List */}\r\n      <h3>History</h3>\r\n      {error && <p style={{ color: 'red' }}>Error fetching history: {error}</p>}\r\n      {transactions.length > 0 ? (\r\n        <ul>\r\n          {/* Make sure your transaction object keys match what /transactions endpoint returns */}\r\n          {transactions.map((tx) => (\r\n             <li key={tx.id || tx.transaction_id}> {/* Use the actual unique ID field */}\r\n                {/* Adjust field names (tx.transaction_date, tx.transaction_type, tx.amount)\r\n                    based on the actual data returned by your GET /transactions endpoint */}\r\n                {new Date(tx.transaction_date || tx.timestamp).toLocaleString()} - {tx.transaction_type} - Amount: ${parseFloat(tx.amount).toFixed(2)}\r\n             </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        !error && !loading && <p>No transactions found.</p> // Added !loading condition\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}