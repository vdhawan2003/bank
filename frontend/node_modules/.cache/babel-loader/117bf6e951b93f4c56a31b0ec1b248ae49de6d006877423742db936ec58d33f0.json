{"ast":null,"code":"var _jsxFileName = \"E:\\\\dbms project bank\\\\frontend\\\\src\\\\pages\\\\TransactionsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTransactions,\n// createTransaction, // Likely no longer needed here unless other features use it\ndepositAmount,\n// Used for actual deposits (updates balance)\ngetBalance, withdrawAmount // Import the CORRECT withdrawal function\n} from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsPage = () => {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n\n  // Loading states\n  const [loadingBalance, setLoadingBalance] = useState(true);\n  const [loadingTransactions, setLoadingTransactions] = useState(true);\n\n  // Error states\n  const [errorBalance, setErrorBalance] = useState(null);\n  const [errorTransactions, setErrorTransactions] = useState(null);\n\n  // Form states\n  const [depositAmountValue, setDepositAmountValue] = useState('');\n  const [withdrawAmountValue, setWithdrawAmountValue] = useState('');\n  const [formDepositError, setFormDepositError] = useState('');\n  const [formDepositSuccess, setFormDepositSuccess] = useState('');\n  const [formWithdrawalError, setFormWithdrawalError] = useState('');\n  const [formWithdrawalSuccess, setFormWithdrawalSuccess] = useState('');\n\n  // --- Fetch Balance Function ---\n  const fetchBalance = async () => {\n    setLoadingBalance(true);\n    setErrorBalance(null);\n    try {\n      const res = await getBalance();\n      const rawBalance = res.data.balance;\n      const numericBalance = parseFloat(rawBalance);\n      if (isNaN(numericBalance)) {\n        throw new Error('Invalid balance data received from server.');\n      }\n      setBalance(numericBalance);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Fetch balance error:\", err);\n      setErrorBalance(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Failed to fetch balance');\n      setBalance(null);\n    } finally {\n      setLoadingBalance(false);\n    }\n  };\n\n  // --- Fetch Transactions Function ---\n  const fetchTransactions = async () => {\n    setLoadingTransactions(true);\n    setErrorTransactions(null);\n    try {\n      const res = await getTransactions();\n      // Ensure transactions is always an array\n      setTransactions(Array.isArray(res.data.transactions) ? res.data.transactions : []);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Fetch transactions error:\", err);\n      setErrorTransactions(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to fetch transactions');\n      setTransactions([]); // Set to empty array on error\n    } finally {\n      setLoadingTransactions(false);\n    }\n  };\n\n  // --- Fetch initial data on mount ---\n  useEffect(() => {\n    fetchBalance();\n    fetchTransactions();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // --- Handle Deposit Submission ---\n  const handleDepositSubmit = async e => {\n    e.preventDefault();\n    setFormDepositError('');\n    setFormDepositSuccess('');\n    const amount = parseFloat(depositAmountValue);\n    if (isNaN(amount) || amount <= 0) {\n      setFormDepositError('Please enter a valid positive amount.');\n      return;\n    }\n    try {\n      await depositAmount({\n        amount\n      }); // Calls POST /deposit\n\n      setFormDepositSuccess(`Successfully deposited $${amount.toFixed(2)}.`);\n      setDepositAmountValue(''); // Clear input after success\n\n      // --- Refresh BOTH balance AND transactions ---\n      fetchBalance();\n      fetchTransactions();\n    } catch (depositError) {\n      var _depositError$respons, _depositError$respons2;\n      console.error(\"Deposit error:\", depositError);\n      setFormDepositError(((_depositError$respons = depositError.response) === null || _depositError$respons === void 0 ? void 0 : (_depositError$respons2 = _depositError$respons.data) === null || _depositError$respons2 === void 0 ? void 0 : _depositError$respons2.message) || 'Deposit failed.');\n      // Refresh balance even on failure, in case error was due to outdated UI state\n      fetchBalance();\n    }\n  };\n\n  // *** UPDATED Handle Withdrawal Submission ***\n  const handleWithdrawSubmit = async e => {\n    e.preventDefault();\n    setFormWithdrawalError('');\n    setFormWithdrawalSuccess('');\n    const amount = parseFloat(withdrawAmountValue); // Ensure it's a number\n\n    if (isNaN(amount) || amount <= 0) {\n      setFormWithdrawalError('Please enter a valid positive amount.');\n      return;\n    }\n    try {\n      // --- Use the correct API function ---\n      await withdrawAmount({\n        amount\n      }); // Calls POST /withdraw\n\n      // Success! Backend handled balance update and logging.\n      setFormWithdrawalSuccess(`Successfully withdrew $${amount.toFixed(2)}.`);\n      setWithdrawAmountValue(''); // Clear input\n\n      // --- Refresh BOTH balance and transactions ---\n      fetchBalance();\n      fetchTransactions();\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      // Handle errors from the /withdraw endpoint (e.g., insufficient funds)\n      console.error(\"Withdrawal error:\", err);\n      setFormWithdrawalError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Withdrawal failed.');\n      // Refresh balance even on failure, in case error was due to outdated UI state\n      fetchBalance();\n    }\n  };\n\n  // --- JSX Below ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Current Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), loadingBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading balance...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 26\n    }, this), errorBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", errorBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 24\n    }, this), balance !== null && !loadingBalance && !errorBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '1.5em',\n        fontWeight: 'bold'\n      },\n      children: [\"$\", balance.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Make a Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDepositSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"depositAmount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"depositAmount\",\n          value: depositAmountValue,\n          onChange: e => setDepositAmountValue(e.target.value),\n          min: \"0.01\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), formDepositSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: formDepositSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 34\n      }, this), formDepositError && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: formDepositError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Make a Withdrawal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleWithdrawSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"withdrawAmount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"withdrawAmount\",\n          value: withdrawAmountValue,\n          onChange: e => setWithdrawAmountValue(e.target.value),\n          min: \"0.01\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), formWithdrawalSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: formWithdrawalSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 39\n      }, this), formWithdrawalError && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: formWithdrawalError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: balance === null,\n        children: \"Withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), loadingTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transaction history...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 31\n    }, this), errorTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error fetching history: \", errorTransactions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }, this), !loadingTransactions && transactions.length === 0 && !errorTransactions && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 12\n    }, this), Array.isArray(transactions) && transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(tx => tx && tx.id ?\n      /*#__PURE__*/\n      // Check if tx and tx.id exist\n      _jsxDEV(\"li\", {\n        children: [new Date(tx.transaction_date || tx.created_at || Date.now()).toLocaleString(), \" -\", tx.transaction_type, \" - Amount: $\", typeof tx.amount === 'number' || !isNaN(parseFloat(tx.amount)) ? parseFloat(tx.amount).toFixed(2) : 'N/A']\n      }, tx.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 16\n      }, this) : null // Render nothing if tx or tx.id is invalid\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsPage, \"ErlQ89WrNAgx4riF/qm0E/xufp8=\");\n_c = TransactionsPage;\nexport default TransactionsPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionsPage\");","map":{"version":3,"names":["React","useState","useEffect","getTransactions","depositAmount","getBalance","withdrawAmount","jsxDEV","_jsxDEV","TransactionsPage","_s","balance","setBalance","transactions","setTransactions","loadingBalance","setLoadingBalance","loadingTransactions","setLoadingTransactions","errorBalance","setErrorBalance","errorTransactions","setErrorTransactions","depositAmountValue","setDepositAmountValue","withdrawAmountValue","setWithdrawAmountValue","formDepositError","setFormDepositError","formDepositSuccess","setFormDepositSuccess","formWithdrawalError","setFormWithdrawalError","formWithdrawalSuccess","setFormWithdrawalSuccess","fetchBalance","res","rawBalance","data","numericBalance","parseFloat","isNaN","Error","err","_err$response","_err$response$data","console","error","response","message","fetchTransactions","Array","isArray","_err$response2","_err$response2$data","handleDepositSubmit","e","preventDefault","amount","toFixed","depositError","_depositError$respons","_depositError$respons2","handleWithdrawSubmit","_err$response3","_err$response3$data","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","fontWeight","onSubmit","htmlFor","type","id","value","onChange","target","min","step","required","disabled","length","map","tx","Date","transaction_date","created_at","now","toLocaleString","transaction_type","_c","$RefreshReg$"],"sources":["E:/dbms project bank/frontend/src/pages/TransactionsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  getTransactions,\r\n  // createTransaction, // Likely no longer needed here unless other features use it\r\n  depositAmount,    // Used for actual deposits (updates balance)\r\n  getBalance,\r\n  withdrawAmount    // Import the CORRECT withdrawal function\r\n} from '../api';\r\n\r\nconst TransactionsPage = () => {\r\n  const [balance, setBalance] = useState(null);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  // Loading states\r\n  const [loadingBalance, setLoadingBalance] = useState(true);\r\n  const [loadingTransactions, setLoadingTransactions] = useState(true);\r\n\r\n  // Error states\r\n  const [errorBalance, setErrorBalance] = useState(null);\r\n  const [errorTransactions, setErrorTransactions] = useState(null);\r\n\r\n  // Form states\r\n  const [depositAmountValue, setDepositAmountValue] = useState('');\r\n  const [withdrawAmountValue, setWithdrawAmountValue] = useState('');\r\n  const [formDepositError, setFormDepositError] = useState('');\r\n  const [formDepositSuccess, setFormDepositSuccess] = useState('');\r\n  const [formWithdrawalError, setFormWithdrawalError] = useState('');\r\n  const [formWithdrawalSuccess, setFormWithdrawalSuccess] = useState('');\r\n\r\n  // --- Fetch Balance Function ---\r\n  const fetchBalance = async () => {\r\n    setLoadingBalance(true);\r\n    setErrorBalance(null);\r\n    try {\r\n      const res = await getBalance();\r\n      const rawBalance = res.data.balance;\r\n      const numericBalance = parseFloat(rawBalance);\r\n      if (isNaN(numericBalance)) {\r\n        throw new Error('Invalid balance data received from server.');\r\n      }\r\n      setBalance(numericBalance);\r\n    } catch (err) {\r\n      console.error(\"Fetch balance error:\", err);\r\n      setErrorBalance(err.response?.data?.message || err.message || 'Failed to fetch balance');\r\n      setBalance(null);\r\n    } finally {\r\n      setLoadingBalance(false);\r\n    }\r\n  };\r\n\r\n  // --- Fetch Transactions Function ---\r\n  const fetchTransactions = async () => {\r\n    setLoadingTransactions(true);\r\n    setErrorTransactions(null);\r\n    try {\r\n      const res = await getTransactions();\r\n      // Ensure transactions is always an array\r\n      setTransactions(Array.isArray(res.data.transactions) ? res.data.transactions : []);\r\n    } catch (err) {\r\n      console.error(\"Fetch transactions error:\", err);\r\n      setErrorTransactions(err.response?.data?.message || 'Failed to fetch transactions');\r\n      setTransactions([]); // Set to empty array on error\r\n    } finally {\r\n      setLoadingTransactions(false);\r\n    }\r\n  };\r\n\r\n  // --- Fetch initial data on mount ---\r\n  useEffect(() => {\r\n    fetchBalance();\r\n    fetchTransactions();\r\n  }, []); // Empty dependency array ensures this runs only once on mount\r\n\r\n    // --- Handle Deposit Submission ---\r\n    const handleDepositSubmit = async (e) => {\r\n      e.preventDefault();\r\n      setFormDepositError('');\r\n      setFormDepositSuccess('');\r\n      const amount = parseFloat(depositAmountValue);\r\n\r\n      if (isNaN(amount) || amount <= 0) {\r\n        setFormDepositError('Please enter a valid positive amount.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await depositAmount({ amount }); // Calls POST /deposit\r\n\r\n        setFormDepositSuccess(`Successfully deposited $${amount.toFixed(2)}.`);\r\n        setDepositAmountValue(''); // Clear input after success\r\n\r\n        // --- Refresh BOTH balance AND transactions ---\r\n        fetchBalance();\r\n        fetchTransactions();\r\n\r\n      } catch (depositError) {\r\n        console.error(\"Deposit error:\", depositError);\r\n        setFormDepositError(depositError.response?.data?.message || 'Deposit failed.');\r\n        // Refresh balance even on failure, in case error was due to outdated UI state\r\n        fetchBalance();\r\n      }\r\n    };\r\n\r\n  // *** UPDATED Handle Withdrawal Submission ***\r\n  const handleWithdrawSubmit = async (e) => {\r\n      e.preventDefault();\r\n      setFormWithdrawalError('');\r\n      setFormWithdrawalSuccess('');\r\n      const amount = parseFloat(withdrawAmountValue); // Ensure it's a number\r\n\r\n      if (isNaN(amount) || amount <= 0) {\r\n          setFormWithdrawalError('Please enter a valid positive amount.');\r\n          return;\r\n      }\r\n\r\n      try {\r\n          // --- Use the correct API function ---\r\n          await withdrawAmount({ amount }); // Calls POST /withdraw\r\n\r\n          // Success! Backend handled balance update and logging.\r\n          setFormWithdrawalSuccess(`Successfully withdrew $${amount.toFixed(2)}.`);\r\n          setWithdrawAmountValue(''); // Clear input\r\n\r\n          // --- Refresh BOTH balance and transactions ---\r\n          fetchBalance();\r\n          fetchTransactions();\r\n\r\n      } catch (err) {\r\n          // Handle errors from the /withdraw endpoint (e.g., insufficient funds)\r\n          console.error(\"Withdrawal error:\", err);\r\n          setFormWithdrawalError(err.response?.data?.message || 'Withdrawal failed.');\r\n          // Refresh balance even on failure, in case error was due to outdated UI state\r\n          fetchBalance();\r\n      }\r\n  };\r\n\r\n  // --- JSX Below ---\r\n  return (\r\n    <div>\r\n      <h2>Transactions</h2>\r\n\r\n      {/* --- Balance Display --- */}\r\n      <h3>Current Balance</h3>\r\n      {loadingBalance && <p>Loading balance...</p>}\r\n      {errorBalance && <p style={{ color: 'red' }}>Error: {errorBalance}</p>}\r\n      {balance !== null && !loadingBalance && !errorBalance && (\r\n        <p style={{ fontSize: '1.5em', fontWeight: 'bold' }}>\r\n          ${balance.toFixed(2)}\r\n        </p>\r\n      )}\r\n      <hr />\r\n\r\n      {/* --- Deposit Form --- */}\r\n      <h3>Make a Deposit</h3>\r\n      {/* The inaccurate static note <p> tag has been removed from here */}\r\n      <form onSubmit={handleDepositSubmit}>\r\n          <div>\r\n              <label htmlFor=\"depositAmount\">Amount:</label>\r\n              <input type=\"number\" id=\"depositAmount\" value={depositAmountValue}\r\n                     onChange={(e) => setDepositAmountValue(e.target.value)}\r\n                     min=\"0.01\" step=\"0.01\" required />\r\n          </div>\r\n          {/* Display success OR error message, not both confusingly */}\r\n          {formDepositSuccess && <p style={{ color: 'green' }}>{formDepositSuccess}</p>}\r\n          {formDepositError && <p style={{ color: 'red' }}>{formDepositError}</p>}\r\n          <button type=\"submit\">Deposit</button>\r\n      </form>\r\n      <hr />\r\n\r\n      {/* --- UPDATED Withdrawal Form --- */}\r\n      <h3>Make a Withdrawal</h3>\r\n      <form onSubmit={handleWithdrawSubmit}>\r\n            <div>\r\n                <label htmlFor=\"withdrawAmount\">Amount:</label>\r\n                <input type=\"number\" id=\"withdrawAmount\" value={withdrawAmountValue}\r\n                       onChange={(e) => setWithdrawAmountValue(e.target.value)}\r\n                       min=\"0.01\" step=\"0.01\" required />\r\n            </div>\r\n            {/* Standard success/error messages */}\r\n            {formWithdrawalSuccess && <p style={{ color: 'green' }}>{formWithdrawalSuccess}</p>}\r\n            {formWithdrawalError && <p style={{ color: 'red' }}>{formWithdrawalError}</p>}\r\n            <button type=\"submit\" disabled={balance === null}>Withdraw</button>\r\n      </form>\r\n      <hr />\r\n\r\n      {/* --- Transaction History --- */}\r\n      <h3>History</h3>\r\n      {loadingTransactions && <p>Loading transaction history...</p>}\r\n      {errorTransactions && <p style={{ color: 'red' }}>Error fetching history: {errorTransactions}</p>}\r\n      {!loadingTransactions && transactions.length === 0 && !errorTransactions && (\r\n           <p>No transactions found.</p>\r\n      )}\r\n      {/* Ensure transactions is an array before mapping */}\r\n      {Array.isArray(transactions) && transactions.length > 0 && (\r\n        <ul>\r\n          {/* Added safety check for tx before accessing properties */}\r\n          {transactions.map((tx) => (\r\n             tx && tx.id ? ( // Check if tx and tx.id exist\r\n               <li key={tx.id}>\r\n                  {/* Use a more robust date parsing method */}\r\n                  {new Date(tx.transaction_date || tx.created_at || Date.now()).toLocaleString()} -\r\n                  {tx.transaction_type} -\r\n                  Amount: ${typeof tx.amount === 'number' || !isNaN(parseFloat(tx.amount)) ? parseFloat(tx.amount).toFixed(2) : 'N/A'}\r\n               </li>\r\n             ) : null // Render nothing if tx or tx.id is invalid\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}